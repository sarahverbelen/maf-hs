arbitrary <- read.table("c:/Users/sarah/Documents/VUB/master_2/thesis/own-code/maf-hs/maf2-slicer/results/arbitrary.csv", header=TRUE, sep=";", dec=",")
t.test(arbitrary$sign.size, arbitrary$concrete.size, paired = TRUE)
t.test(arbitrary$sign.size, arbitrary$parity.size, paired = TRUE)
t.test(arbitrary$sign.size, arbitrary$concrete.size, paired = TRUE)
t.test(manySets$sign.size, manySets$parity.size, paired = TRUE)
t.test(manySets$sign.size, manySets$concrete.size, paired = TRUE)
manySets <- read.table("c:/Users/sarah/Documents/VUB/master_2/thesis/own-code/maf-hs/maf2-slicer/results/manySets.csv", header=TRUE, sep=";", dec=",")
t.test(manySets$sign.size, manySets$concrete.size, paired = TRUE)
arbitrary$diff <- arbitrary$sign.size - arbitrary$concrete.size
shapiro.test(arbitrary$diff)
shapiro.test(manySets$diff)
manySets$diff <- manySets$sign.size - manySets$parity.size
shapiro.test(manySets$diff)
manySets$diff <- manySets$sign.size - manySets$concrete.size
shapiro.test(manySets$diff)
t.test(arbitrary$sign.size, arbitrary$concrete.size, paired = TRUE)
t.test(manySets$sign.size, manySets$concrete.size, paired = TRUE)
arbitrary <- read.table("c:/Users/sarah/Documents/VUB/master_2/thesis/own-code/maf-hs/maf2-slicer/results/arbitrary.csv", header=TRUE, sep=";", dec=",")
arbitrary
arbitrary
#############
boxplot(manySets$sign.diff)
boxplot(manySets$sign.diff, ylim=c(0, 1))
boxplot(manySets$sign.size)
manySets <- read.table("c:/Users/sarah/Documents/VUB/master_2/thesis/own-code/maf-hs/maf2-slicer/results/manySets.csv", header=TRUE, sep=";", dec=",")
boxplot(manySets$sign.diff)
boxplot(c(manySets$sign.diff, manySets$parity.diff))
boxplot(manySets$sign.diff, manySets$parity.diff)
boxplot(manySets$sign.diff, manySets$parity.diff, manySets$concrete.diff)
boxplot(arbitrary$sign.diff, arbitrary$parity.deff, parity$concrete.diff)
boxplot(arbitrary$sign.diff, arbitrary$parity.deff, arbitrary$concrete.diff)
boxplot(arbitrary$sign.diff, arbitrary$parity.diff, arbitrary$concrete.diff)
boxplot(manySets$sign.diff, manySets$parity.diff, manySets$concrete.diff)
boxplot(arbitrary$sign.diff, arbitrary$parity.diff, arbitrary$concrete.diff)
boxplot(manySets$sign.diff, manySets$parity.diff, manySets$concrete.diff)
boxplot(arbitrary$sign.diff, arbitrary$parity.diff, arbitrary$concrete.diff)
boxplot(manySets$sign.diff, manySets$parity.diff, manySets$concrete.diff)
boxplot(arbitrary$sign.diff, arbitrary$parity.diff, arbitrary$concrete.diff)
boxplot(manySets$sign.diff, manySets$parity.diff, manySets$concrete.diff)
boxplot(manySets$sign.diff, manySets$parity.diff, manySets$concrete.diff, key=c("sign", "parity", "concrete")))
boxplot(manySets$sign.diff, manySets$parity.diff, manySets$concrete.diff, key=c("sign", "parity", "concrete"))
boxplot(manySets$sign.diff, manySets$parity.diff, manySets$concrete.diff, labels=c("sign", "parity", "concrete"))
boxplot(manySets$sign.diff, manySets$parity.diff, manySets$concrete.diff, label=c("sign", "parity", "concrete"))
boxplot(manySets$sign.diff, manySets$parity.diff, manySets$concrete.diff)
boxplot(manySets$sign.diff, manySets$parity.diff, manySets$concrete.diff, key = c("s", "p", "c"))
boxplot(manySets$sign.diff, manySets$concrete.diff, key = c("s", "c"))
boxPlot(manySets$sign.diff, manySets$concrete.diff, key = c("s", "c"))
boxplot(manySets$sign.diff, manySets$concrete.diff, key = c("s", "c"))
boxplot(manySets$sign.diff, manySets$concrete.diff, key = c(1, 2))
boxplot(manySets$sign.diff, manySets$concrete.diff)
boxplot(manySets$sign.diff, manySets$concrete.diff, labels=c(0, 1))
boxplot(manySets$sign.diff, manySets$concrete.diff)
boxplot(manySets$sign.diff, arbitrary$parity.size, manySets$concrete.diff)
boxplot(manySets$sign.diff, manySets$parity.diff, manySets$concrete.diff)
boxplot(arbitrary$sign.diff, arbitrary$parity.diff, arbitrary$concrete.diff)
boxplot(arbitrary$sign.diff, arbitrary$parity.diff, arbitrary$concrete.diff)
boxplot(manySets$sign.diff, manySets$parity.diff, manySets$concrete.diff)
arbitrary <- read.table("c:/Users/sarah/Documents/VUB/master_2/thesis/own-code/maf-hs/maf2-slicer/results/arbitrary.csv", header=TRUE, sep=";", dec=",")
boxplot(arbitrary$sign.diff, arbitrary$parity.diff, arbitrary$concrete.diff)
t.test(arbitrary$sign.size, arbitrary$concrete.size, paired = TRUE)
t.test(manySets$sign.size, manySets$concrete.size, paired = TRUE)
boxplot(manySets$sign.diff, manySets$parity.diff, manySets$concrete.diff)
boxplot(manySets$sign.diff, manySets$parity.diff, manySets$concrete.diff, fact=c("s", "p", "c"))
boxplot(manySets$sign.diff, manySets$parity.diff, manySets$concrete.diff)
q()
arbitrary <- read.table("c:/Users/sarah/Documents/VUB/master_2/thesis/own-code/maf-hs/maf2-slicer/results/arbitrary-clean.csv", header=TRUE, sep=";", dec=",")
arbitrary
t.test(arbitrary$sign.size, arbitrary$parity.size, paired = TRUE)
t.test(arbitrary$sign.size, arbitrary$concrete.size, paired = TRUE)
boxplot(arbitrary$sign.diff, arbitrary$parity.diff, arbitrary$concrete.diff)
boxplot(arbitrary$sign.diff, arbitrary$parity.diff, arbitrary$concrete.diff)
arbitrary <- read.table("c:/Users/sarah/Documents/VUB/master_2/thesis/own-code/maf-hs/maf2-slicer/results/arbitrary-clean.csv", header=TRUE, sep=";", dec=",")
boxplot(arbitrary$sign.diff, arbitrary$parity.diff, arbitrary$concrete.diff)
arbitrary <- read.table("c:/Users/sarah/Documents/VUB/master_2/thesis/own-code/maf-hs/maf2-slicer/results/arbitrary-clean.csv", header=TRUE, sep=";", dec=",")
boxplot(arbitrary$sign.diff, arbitrary$parity.diff, arbitrary$concrete.diff)
manySets <- read.table("c:/Users/sarah/Documents/VUB/master_2/thesis/own-code/maf-hs/maf2-slicer/results/manySets.csv", header=TRUE, sep=";", dec=",")
boxplot(manySets$sign.diff, manySets$parity.diff, manySets$concrete.diff)
manySets <- read.table("c:/Users/sarah/Documents/VUB/master_2/thesis/own-code/maf-hs/maf2-slicer/results/manySets-clean.csv", header=TRUE, sep=";", dec=",")
boxplot(manySets$sign.diff, manySets$parity.diff, manySets$concrete.diff)
arbitrary
arbitrary
boxplot(manySets$analysis.time, manySets$concrete.analysis.time, manySets$abstract.analysis.time)
boxplot(arbitrary$analysis.time, arbitrary$concrete.analysis.time, arbitrary$abstract.analysis.time)
t.test(arbitrary$analysis.time, arbitrary$concrete.analysis.time, paired = TRUE, alternative = "g")
t.test(arbitrary$analysis.time, arbitrary$concrete.analysis.time, paired = TRUE, alternative = "s")
t.test(arbitrary$analysis.time, arbitrary$concrete.analysis.time, paired = TRUE, alternative = "l")
t.test(arbitrary$concrete.analysis.time, arbitrary$abstract.analysis.time, paired = TRUE, alternative = "g")
t.test(arbitrary$sign.size, arbitrary$parity.size, paired = TRUE)
t.test(arbitrary$sign.size, arbitrary$parity.size, paired = TRUE) # not significant
t.test(arbitrary$sign.size, arbitrary$concrete.size, paired = TRUE) # significant
t.test(arbitrary$analysis.time, arbitrary$abstract.analysis.time, paired = TRUE, alternative = "g") # significant
t.test(arbitrary$concrete.analysis.time, arbitrary$abstract.analysis.time, paired = TRUE, alternative = "g") # significant
t.test(arbitrary$analysis.time, arbitrary$concrete.analysis.time, paired = TRUE, alternative = "g") # significant
t.test(arbitrary$analysis.time, arbitrary$abstract.analysis.time, paired = TRUE, alternative = "g") # significant
t.test(arbitrary$concrete.analysis.time, arbitrary$abstract.analysis.time, paired = TRUE, alternative = "g") # significant
t.test(manySets$sign.size, manySets$parity.size, paired = TRUE)
t.test(manySets$sign.size, manySets$concrete.size, paired = TRUE)
t.test(manySets$sign.size, manySets$concrete.size, paired = TRUE)
t.test(manySets$analysis.time, manySets$concrete.analysis.time, paired = TRUE, alternative = "g") # significant
t.test(manySets$analysis.time, manySets$abstract.analysis.time, paired = TRUE, alternative = "g") # significant
t.test(manySets$concrete.analysis.time, manySets$abstract.analysis.time, paired = TRUE, alternative = "g") # significant
boxplot(manySets$analysis.time, manySets$concrete.analysis.time, manySets$abstract.analysis.time)
boxplot(manySets$sign.diff, manySets$parity.diff, manySets$concrete.diff, names=c("sign", "parity", "concrete"))
boxplot(arbitrary$analysis.time, arbitrary$concrete.analysis.time, arbitrary$abstract.analysis.time, names=c("sign", "parity", "concrete"))
boxplot(arbitrary$analysis.time, arbitrary$concrete.analysis.time, arbitrary$abstract.analysis.time, names=c("original program", "concrete slice", "abstract slice"))
boxplot(manySets$analysis.time, manySets$concrete.analysis.time, manySets$abstract.analysis.time, names=c("original program", "concrete slice", "abstract slice"))
 ylab="Kind of slice")
 ylab="Kind of slice")
boxplot(manySets$analysis.time, manySets$concrete.analysis.time, manySets$abstract.analysis.time, names=c("original program", "concrete slice", "abstract slice"), ylab="Kind of slice")
boxplot(manySets$analysis.time, manySets$concrete.analysis.time, manySets$abstract.analysis.time, names=c("original program", "concrete slice", "abstract slice"), xlab="Kind of slice", ylab="Analysis time (ns)", main="Analysis time per kind of slice")
boxplot(arbitrary$analysis.time, arbitrary$concrete.analysis.time, arbitrary$abstract.analysis.time, names=c("original program", "concrete slice", "abstract slice"), xlab="Kind of slice", ylab="Analysis time (ns)", main="Analysis time per kind of slice")
boxplot(arbitrary$sign.diff, arbitrary$parity.diff, arbitrary$concrete.diff, names=c("sign", "parity", "concrete"), xlab="Kind of slice", ylab="% removed from original", main="Size decrease after slicing")
boxplot(manySets$sign.diff, manySets$parity.diff, manySets$concrete.diff, names=c("sign", "parity", "concrete"), xlab="Kind of slice", ylab="% removed from original", main="Size decrease after slicing")
boxplot(manySets$analysis.time, manySets$concrete.analysis.time, manySets$abstract.analysis.time, names=c("original program", "concrete slice", "abstract slice"), xlab="Kind of slice", ylab="Analysis time (ns)", main="Analysis time per kind of slice")
boxplot(manySets$analysis.time, manySets$concrete.analysis.time, manySets$abstract.analysis.time, names=c("original program", "concrete slice", "abstract slice"), xlab="Kind of slice", ylab="Analysis time (ns)", main="Analysis time per kind of slice")
boxplot(arbitrary$sign.diff, arbitrary$parity.diff, arbitrary$concrete.diff, names=c("sign", "parity", "concrete"), xlab="Kind of slice", ylab="% removed from original", main="Size decrease after slicing")
boxplot(manySets$analysis.time, manySets$concrete.analysis.time, manySets$abstract.analysis.time, names=c("original program", "concrete slice", "abstract slice"), xlab="Kind of slice", ylab="Analysis time (ns)", main="Analysis time per kind of slice (programs with > 5 set!s)")
boxplot(manySets$sign.diff, manySets$parity.diff, manySets$concrete.diff, names=c("sign", "parity", "concrete"), xlab="Kind of slice", ylab="% removed from original", main="Size decrease after slicing (programs with > 5 set!s)")
boxplot(manySets$analysis.time, manySets$concrete.analysis.time, manySets$abstract.analysis.time, names=c("original program", "concrete slice", "abstract slice"), xlab="Kind of slice", ylab="Analysis time (ns)", main="Analysis time per kind of slice (programs with > 5 set!s)")
boxplot(manySets$sign.diff, manySets$parity.diff, manySets$concrete.diff, names=c("sign", "parity", "concrete"), xlab="Kind of slice", ylab="% removed from original", main="Size decrease after slicing (programs with > 5 set!s)")
boxplot(arbitrary$sign.diff, arbitrary$parity.diff, arbitrary$concrete.diff, names=c("sign", "parity", "concrete"), xlab="Kind of slice", ylab="% removed from original", main="Size decrease after slicing (arbitrary programs)")
boxplot(arbitrary$analysis.time, arbitrary$concrete.analysis.time, arbitrary$abstract.analysis.time, names=c("original program", "concrete slice", "abstract slice"), xlab="Kind of slice", ylab="Analysis time (ns)", main="Analysis time per kind of slice (arbitrary programs)")
boxplot(manySets$sign.diff, manySets$parity.diff, manySets$concrete.diff, names=c("sign", "parity", "concrete"), xlab="Kind of slice", ylab="% removed from original", main="Size decrease after slicing (programs with > 5 set!s)")
boxplot(manySets$analysis.time, manySets$concrete.analysis.time, manySets$abstract.analysis.time, names=c("original program", "concrete slice", "abstract slice"), xlab="Kind of slice", ylab="Analysis time (ns)", main="Analysis time per kind of slice (programs with > 5 set!s)")
boxplot(arbitrary$analysis.time, arbitrary$concrete.analysis.time, arbitrary$abstract.analysis.time, names=c("original program", "concrete slice", "abstract slice"), xlab="Kind of slice", ylab="Analysis time (ns)", main="Analysis time per kind of slice (arbitrary programs)")
boxplot(manySets$analysis.time, manySets$concrete.analysis.time, manySets$abstract.analysis.time, names=c("original program", "concrete slice", "abstract slice"), xlab="Kind of slice", ylab="Analysis time (ns)", main="Analysis time per kind of slice (programs with > 5 set!s)")
boxplot(arbitrary$analysis.time, arbitrary$concrete.analysis.time, arbitrary$abstract.analysis.time, names=c("original program", "concrete slice", "abstract slice"), xlab="Kind of slice", ylab="Analysis time (ns)", main="Analysis time per kind of slice (arbitrary programs)")
boxplot(manySets$analysis.time, manySets$concrete.analysis.time, manySets$abstract.analysis.time, names=c("original program", "concrete slice", "abstract slice"), xlab="Kind of slice", ylab="Analysis time (ns)", main="Analysis time per kind of slice (programs with > 5 set!s)")
boxplot(arbitrary$sign.diff, arbitrary$parity.diff, arbitrary$concrete.diff, names=c("sign", "parity", "concrete"), xlab="Kind of slice", ylab="% removed from original", main="Size decrease after slicing (arbitrary programs)")
boxplot(manySets$sign.diff, manySets$parity.diff, manySets$concrete.diff, names=c("sign", "parity", "concrete"), xlab="Kind of slice", ylab="% removed from original", main="Size decrease after slicing (programs with > 5 set!s)")
plot(manySets$size, manySets$sign.size)
plot(manySets$size, manySets$sign.diff)
plot(manySets$size, manySets$concrete.diff)
plot(manySets$size, manySets$analysis.time)
plot(manySets$size, manySets$abstract.analysis.time)
plot(manySets$size, manySets$concrete.analysis.time)
plot(manySets$size, manySets$abstract.analysis.time)
plot(manySets$size, manySets$concrete.analysis.time)
plot(manySets$size, manySets$abstract.analysis.time)
plot(manySets$size, manySets$concrete.analysis.time)
plot(manySets$size, manySets$abstract.analysis.time)
plot(manySets$size, manySets$concrete.analysis.time)
plot(manySets$size, manySets$abstract.analysis.time)
plot(manySets$size, manySets$abstract.analysis.time)
plot(manySets$size, manySets$sign.diff)
# time boxplot
boxplot(manySets$sign.diff, manySets$parity.diff, manySets$concrete.diff, names=c("sign", "parity", "concrete"), xlab="Kind of slice", ylab="% removed from original", main="Size decrease after slicing (programs with > 5 set!s)")
plot(manySets$size, manySets$sign.diff, xlab="% removed from original", ylab="program size")
plot(manySets$size, manySets$sign.diff, ylab="% removed from original", xlab="program size")
plot(manySets$size, manySets$sign.diff, ylab="% removed from original", xlab="program size (AST nodes)")
plot(manySets$size, manySets$analysis.time)
plot(manySets$size, manySets$sign.diff, ylab="% removed from original", xlab="program size (AST nodes)")
plot(manySets$size, manySets$sign.diff, ylab="% removed from original", xlab="program size (AST nodes)", main="Relation between % removed and program size")
plot(manySets$size, manySets$sign.diff, ylab="% removed from original", xlab="program size (AST nodes)", main="Relation between % removed and program size (programs with > 5 set!s)")
plot(manySets$size, manySets$sign.diff, ylab="% removed from original", xlab="program size (AST nodes)", main="% removed vs program size (programs with > 5 set!s)")
plot(manySets$size, manySets$analysis.time)
plot(manySets$size, manySets$abstract.analysis.time, xlab="program size (AST nodes)", ylab="Analysis time (ns)", main="analysis time vs program size (abstract slice) (> 5 set!s)")
plot(arbitrary$size, arbitrary$sign.diff, ylab="% removed from original", xlab="program size (AST nodes)", main="% removed vs program size (arbitrary programs)")
plot(arbitrary$size, arbitrary$analysis.time, xlab="program size (AST nodes)", ylab="Analysis time (ns)", main="analysis time vs program size (original program) (arbitrary)")
plot(arbitrary$size, arbitrary$abstract.analysis.time, xlab="program size (AST nodes)", ylab="Analysis time (ns)", main="analysis time vs program size (abstract slice) (arbitrary)")
plot(manySets$size, manySets$abstract.analysis.time, xlab="original program size (AST nodes)", ylab="Analysis time (ns)", main="analysis time vs program size (abstract slice) (> 5 set!s)")
plot(manySets$size, manySets$analysis.time, xlab="program size (AST nodes)", ylab="Analysis time (ns)", main="analysis time vs program size (original program) (> 5 set!s)")
plot(manySets$size, manySets$abstract.analysis.time, xlab="original program size (AST nodes)", ylab="Analysis time (ns)", main="analysis time vs program size (abstract slice) (> 5 set!s)")
t.test(arbitrary$sign.size, manySets$sign.size, paired = FALSE)
boxplot(arbitrary$sign.size, manySets$sign.size)
boxplot(arbitrary$sign.size, manySets$sign.size, names=c("arbitrary programs", "programs with >5 set!s"))
boxplot(arbitrary$sign.size, manySets$sign.size, names=c("arbitrary programs", "programs with >5 set!s"), xlab="kind of slice", ylab="% removed")
t.test(arbitrary$sign.diff, manySets$sign.diff, paired = FALSE) # significant 
boxplot(arbitrary$sign.diff, manySets$sign.diff, names=c("arbitrary programs", "programs with >5 set!s"), xlab="kind of slice", ylab="% removed")
boxplot(arbitrary$sign.diff, manySets$sign.diff, names=c("arbitrary programs", "programs with >5 set!s"), xlab="kind of slice", ylab="% removed", main="Difference in % sliced")
plot(manySets$size, manySets$abstract.analysis.time, xlab="original program size (AST nodes)", ylab="Analysis time (ns)", main="analysis time vs program size (abstract slice) (> 5 set!s)")
q()
arbitrary <- read.table("c:/Users/sarah/Documents/VUB/master_2/thesis/own-code/maf-hs/maf2-slicer/results/arbitrary-clean.csv", header=TRUE, sep=";", dec=",")
boxplot(arbitrary$sign.diff, arbitrary$parity.diff, arbitrary$concrete.diff, names=c("sign", "parity", "concrete"), xlab="Kind of slice", ylab="% removed from original", main="Size decrease after slicing (arbitrary programs)")
t.test(arbitrary$sign.size, arbitrary$concrete.size, paired = TRUE) # significant
boxplot(manySets$sign.diff, manySets$parity.diff, manySets$concrete.diff, names=c("sign", "parity", "concrete"), xlab="Kind of slice", ylab="% removed from original", main="Size decrease after slicing (programs with > 5 set!s)")
boxplot(manySets$sign.diff, manySets$parity.diff, manySets$concrete.diff, names=c("sign", "parity", "concrete"), xlab="Kind of slice", ylab="% removed from original", main="Size decrease after slicing (programs with > 5 set!s)")
manySets <- read.table("c:/Users/sarah/Documents/VUB/master_2/thesis/own-code/maf-hs/maf2-slicer/results/manySets-clean.csv", header=TRUE, sep=";", dec=",")
boxplot(manySets$sign.diff, manySets$parity.diff, manySets$concrete.diff, names=c("sign", "parity", "concrete"), xlab="Kind of slice", ylab="% removed from original", main="Size decrease after slicing (programs with > 5 set!s)")
boxplot(arbitrary$analysis.time, arbitrary$concrete.analysis.time, arbitrary$abstract.analysis.time, names=c("original program", "concrete slice", "abstract slice"), xlab="Kind of slice", ylab="Analysis time (ns)", main="Analysis time per kind of slice (arbitrary programs)")
t.test(arbitrary$concrete.analysis.time, arbitrary$abstract.analysis.time, paired = TRUE, alternative = "g") # significant
boxplot(arbitrary$sign.diff, manySets$sign.diff, names=c("arbitrary programs", "programs with >5 set!s"), xlab="kind of slice", ylab="% removed", main="Difference in % sliced")
arbitrary$diff <- arbitrary$sign.size - arbitrary$concrete.size
t.test(arbitrary$sign.size, arbitrary$concrete.size, paired = TRUE) # significant
shapiro.test(arbitrary$diff)
arbitrary <- read.table("c:/Users/sarah/Documents/VUB/master_2/thesis/own-code/maf-hs/maf2-slicer/results/arbitrary-clean.csv", header=TRUE, sep=";", dec=",")
boxplot(arbitrary$analysis.time, arbitrary$concrete.time.diff, arbitrary$abstract.time.diff, names=c("original program", "concrete slice", "abstract slice"), xlab="Kind of slice", ylab="Analysis time (ns)", main="Analysis time per kind of slice (arbitrary programs)")
boxplot(arbitrary$concrete.time.diff, arbitrary$abstract.time.diff, names=c("concrete slice", "abstract slice"), xlab="Kind of slice", ylab="% of original analysis time", main="Analysis time per kind of slice (arbitrary programs)")
t.test(arbitrary$concrete.time.diff, arbitrary$abstract.time.diff, paired = TRUE, alternative = "g") # significant
t.test(arbitrary$concrete.time.diff, arbitrary$abstract.time.diff, paired = TRUE) # significant
t.test(arbitrary$concrete.time.diff, arbitrary$abstract.time.diff, paired = TRUE, alternative = "g") # not significant
plot(arbitrary$size, arbitrary$sign.diff, ylab="% removed from original", xlab="program size (AST nodes)", main="% removed vs program size (arbitrary programs)")
plot(arbitrary$size, arbitrary$sign.diff, ylab="% from original", xlab="program size (AST nodes)", main="slice size vs program size (arbitrary programs)")
boxplot(arbitrary$sign.diff, arbitrary$parity.diff, arbitrary$concrete.diff, names=c("sign", "parity", "concrete"), xlab="Kind of slice", ylab="% removed from original", main="Size decrease after slicing (arbitrary programs)")
t.test(arbitrary$sign.size, arbitrary$parity.size, paired = TRUE) # not significant
t.test(arbitrary$sign.size, arbitrary$concrete.size, paired = TRUE) # significant
t.test(arbitrary$sign.size, arbitrary$concrete.size, paired = TRUE, alternative = "g") # significant
t.test(arbitrary$sign.size, arbitrary$concrete.size, paired = TRUE, alternative = "l") # significant
t.test(arbitrary$concrete.time.diff, arbitrary$abstract.time.diff, paired = TRUE, alternative = "g") # not significant
manySets <- read.table("c:/Users/sarah/Documents/VUB/master_2/thesis/own-code/maf-hs/maf2-slicer/results/manySets-clean.csv", header=TRUE, sep=";", dec=",")
t.test(manySets$sign.size, manySets$parity.size, paired = TRUE) # not significant
t.test(manySets$concrete.time.diff, manySets$abstract.time.diff, paired = TRUE, alternative = "g") # significant
manySets <- read.table("c:/Users/sarah/Documents/VUB/master_2/thesis/own-code/maf-hs/maf2-slicer/results/manySets-clean.csv", header=TRUE, sep=";", dec=",")
t.test(manySets$concrete.time.diff, manySets$abstract.time.diff, paired = TRUE, alternative = "g") # significant
boxplot(manySets$analysis.time, manySets$concrete.analysis.time, manySets$abstract.analysis.time, names=c("original program", "concrete slice", "abstract slice"), xlab="Kind of slice", ylab="Analysis time (ns)", main="Analysis time per kind of slice (programs with > 5 set!s)")
boxplot(manySets$concrete.time.diff, manySets$abstract.time.diff, names=c("concrete slice", "abstract slice"), xlab="Kind of slice", ylab="% of original analysis time)", main="Analysis time per kind of slice (programs with > 5 set!s)")
shapiro.test(manySets$sign.diff)
shapiro.test(manySets$parity.diff)
shapiro.test(manySets$concrete.diff)
t.test(manySets$concrete.time.diff, manySets$abstract.time.diff, paired = TRUE, alternative = "g") # significant
plot(manySets$size, manySets$sign.diff, ylab="% removed from original", xlab="program size (AST nodes)", main="% removed vs program size (programs with > 5 set!s)")
plot(manySets$size, manySets$sign.diff, ylab="% of original size", xlab="program size (AST nodes)", main="slice size vs program size (programs with > 5 set!s)")
boxplot(manySets$sign.diff, manySets$parity.diff, manySets$concrete.diff, names=c("sign", "parity", "concrete"), xlab="Kind of slice", ylab="% removed from original", main="Size decrease after slicing (programs with > 5 set!s)")
# time boxplot
boxplot(manySets$sign.diff, manySets$parity.diff, manySets$concrete.diff, names=c("sign", "parity", "concrete"), xlab="Kind of slice", ylab="% of original size", main="Size after slicing (programs with > 5 set!s)")
t.test(arbitrary$sign.size, arbitrary$concrete.size, paired = TRUE, alternative = "l") # significant
t.test(arbitrary$sign.size, arbitrary$parity.size, paired = TRUE) # not significant
boxplot(arbitrary$sign.diff, arbitrary$parity.diff, arbitrary$concrete.diff, names=c("sign", "parity", "concrete"), xlab="Kind of slice", ylab="% of original size", main="Size decrease after slicing (arbitrary programs)")
q()
forcedSets <- read.table("c:/Users/sarah/Documents/VUB/master_2/thesis/own-code/maf-hs/maf2-slicer/results/forced0Sets-clean.csv", header=TRUE, sep=";", dec=",")
forcedSets <- read.table("c:/Users/sarah/Documents/VUB/master_2/thesis/own-code/maf-hs/maf2-slicer/results/forcedSets-clean.csv", header=TRUE, sep=";", dec=",")
shapiro.test(forcedSets$parity.diff)
shapiro.test(forcedSets$sign.diff)
shapiro.test(forcedSets$concrete.diff)
manySets <- read.table("c:/Users/sarah/Documents/VUB/master_2/thesis/own-code/maf-hs/maf2-slicer/results/manySets-clean.csv", header=TRUE, sep=";", dec=",")
shapiro.test(manySets$parity.diff)
t.test(forcedSets$sign.size, forcedSets$parity.size, paired = TRUE) # not significant
t.test(manySets$sign.size, manySets$parity.size, paired = TRUE) # not significant
t.test(manySets$sign.size, manySets$parity.size, paired = TRUE) # not significant
t.test(manySets$sign.size, manySets$concrete.size, paired = TRUE) # significant
t.test(manySets$sign.size, manySets$parity.size, paired = TRUE) # not significant
t.test(manySets$sign.size, manySets$concrete.size, paired = TRUE) # significant
t.test(manySets$sign.size, manySets$parity.size, paired = TRUE) # not significant
arbitrary <- read.table("c:/Users/sarah/Documents/VUB/master_2/thesis/own-code/maf-hs/maf2-slicer/results/arbitrary-clean.csv", header=TRUE, sep=";", dec=",")
t.test(arbitrary$sign.size, arbitrary$parity.size, paired = TRUE) # not significant
t.test(forcedSets$sign.size, forcedSets$parity.size, paired = TRUE) # not significant
t.test(manySets$sign.size, manySets$concrete.size, paired = TRUE) # significant
t.test(forcedSets$sign.size, forcedSets$concrete.size, paired = TRUE) # significant
boxplot(forcedSets$sign.diff, forcedSets$parity.diff, forcedSets$concrete.diff, names=c("sign", "parity", "concrete"), xlab="Kind of slice", ylab="% of original size", main="Size after slicing (programs with forced set!s)")
boxplot(forcedSets$sign.diff, forcedSets$parity.diff, forcedSets$concrete.diff, names=c("sign", "parity", "concrete"), xlab="Kind of slice", ylab="% of original size", main="Size after slicing")
boxplot(forcedSets$concrete.time.diff, forcedSets$abstract.time.diff, names=c("concrete slice", "abstract slice"), xlab="Kind of slice", ylab="% of original analysis time)", main="Analysis time per kind of slice (parity analysis)")
boxplot(forcedSets$concrete.time.diff, forcedSets$abstract.time.diff, names=c("concrete slice", "abstract slice"), xlab="Kind of slice", ylab="analysis time (% of original time)", main="Analysis time per kind of slice (parity analysis)")
t.test(forcedSets$concrete.time.diff, forcedSets$abstract.time.diff, paired = TRUE, alternative = "g") # significant
forcedSets <- read.table("c:/Users/sarah/Documents/VUB/master_2/thesis/own-code/maf-hs/maf2-slicer/results/forcedSets-clean.csv", header=TRUE, sep=";", dec=",")
boxplot(forcedSets$sign.diff, forcedSets$parity.diff, forcedSets$concrete.diff, names=c("sign", "parity", "concrete"), xlab="Kind of slice", ylab="% of original size", main="Size after slicing")
t.test(forcedSets$sign.size, forcedSets$parity.size, paired = TRUE) # significant
t.test(forcedSets$sign.size, forcedSets$concrete.size, paired = TRUE) # significant
t.test(forcedSets$concrete.time.diff, forcedSets$abstract.time.diff, paired = TRUE, alternative = "g") # significant
t.test(forcedSets$concrete.time.diff, forcedSets$abstract.time.diff, paired = TRUE, alternative = "g") # significant
boxplot(forcedSets$concrete.time.diff, forcedSets$abstract.time.diff, names=c("concrete slice", "abstract slice"), xlab="Kind of slice", ylab="analysis time (% of original time)", main="Analysis time per kind of slice (parity analysis)")
forcedSets <- read.table("c:/Users/sarah/Documents/VUB/master_2/thesis/own-code/maf-hs/maf2-slicer/results/forcedSets-clean.csv", header=TRUE, sep=";", dec=",")
t.test(forcedSets$concrete.time.diff, forcedSets$abstract.time.diff, paired = TRUE, alternative = "g") # significant
boxplot(forcedSets$sign.diff, forcedSets$parity.diff, forcedSets$concrete.diff, names=c("sign", "parity", "concrete"), xlab="Kind of slice", ylab="% of original size", main="Size after slicing")
boxplot(forcedSets$concrete.time.diff, forcedSets$abstract.time.diff, names=c("concrete slice", "abstract slice"), xlab="Kind of slice", ylab="analysis time (% of original time)", main="Analysis time per kind of slice (parity analysis)")
t.test(forcedSets$concrete.time.diff, forcedSets$abstract.time.diff, paired = TRUE, alternative = "g") # significant
boxplot(forcedSets$concrete.time.diff, forcedSets$abstract.time.diff, names=c("concrete slice", "abstract slice"), xlab="Kind of slice", ylab="analysis time (% of original time)", main="Analysis time per kind of slice (parity analysis)")
boxplot(forcedSets$sign.diff, forcedSets$parity.diff, forcedSets$concrete.diff, names=c("sign", "parity", "concrete"), xlab="Kind of slice", ylab="% of original size", main="Size after slicing")
boxplot(forcedSets$concrete.time.diff, forcedSets$abstract.time.diff, names=c("concrete slice", "abstract slice"), xlab="Kind of slice", ylab="analysis time (% of original time)", main="Analysis time per kind of slice (parity analysis)")
forcedSets <- read.table("c:/Users/sarah/Documents/VUB/master_2/thesis/own-code/maf-hs/maf2-slicer/results/forcedSets-clean.csv", header=TRUE, sep=";", dec=",")
boxplot(forcedSets$concrete.time.diff, forcedSets$abstract.time.diff, names=c("concrete slice", "abstract slice"), xlab="Kind of slice", ylab="analysis time (% of original time)", main="Analysis time per kind of slice (parity analysis)")
forcedSets <- read.table("c:/Users/sarah/Documents/VUB/master_2/thesis/own-code/maf-hs/maf2-slicer/results/forcedSets-clean.csv", header=TRUE, sep=";", dec=",")
boxplot(forcedSets$concrete.time.diff, forcedSets$abstract.time.diff, names=c("concrete slice", "abstract slice"), xlab="Kind of slice", ylab="analysis time (% of original time)", main="Analysis time per kind of slice (parity analysis)")
plot(forcedSets$size, forcedSets$sign.diff, ylab="% of original size", xlab="program size (AST nodes)", main="slice size vs program size (programs with > 5 set!s)")
plot(forcedSets$sets, forcedSets$sign.diff, xlab="% of set!s", ylab="slice size (% of original size)", main="slice size vs % of set!s")
forcedSets <- read.table("c:/Users/sarah/Documents/VUB/master_2/thesis/own-code/maf-hs/maf2-slicer/results/forcedSets-clean.csv", header=TRUE, sep=";", dec=",")
plot(forcedSets$sets, forcedSets$sign.diff, xlab="% of set!s", ylab="slice size (% of original size)", main="slice size vs % of set!s")
exp(mean(log(forcedSets$sign.diff)))
exp(mean(log(forcedSets$parity.diff)))
exp(mean(log(forcedSets$concrete.diff)))
exp(mean(log(forcedSets$concrete.time.diff)))
exp(mean(log(forcedSets$abstract.time.diff)))
plot(forcedSets$size, forcedSets$analysis.time, xlab="program size (AST nodes)", ylab="Analysis time (ns)", main="analysis time vs program size (original program) (> 5 set!s)")
plot(forcedSets$size, forcedSets$analysis.time, xlab="program size (AST nodes)", ylab="Analysis time (ns)", main="analysis time vs program size (original program)")
plot(manySets$size, manySets$abstract.analysis.time, xlab="original program size (AST nodes)", ylab="Analysis time (ns)", main="analysis time vs program size (abstract slice)")
plot(manySets$size, manySets$abstract.time.diff, xlab="original program size (AST nodes)", ylab="Analysis time (ns)", main="analysis time vs program size (abstract slice)")
plot(forcedSets$size, forcedSets$concrete.time.diff, xlab="original program size (AST nodes)", ylab="Analysis time (% of original)", main="analysis time difference vs program size (concrete slice)")
plot(manySets$size, manySets$abstract.time.diff, xlab="original program size (AST nodes)", ylab="Analysis time (% of original)", main="analysis time difference vs program size (abstract slice)")
plot(forcedSets$size, forcedSets$concrete.time.diff, xlab="original program size (AST nodes)", ylab="Analysis time (% of original)", main="analysis time difference vs program size (concrete slice)")
plot(forcedSets$size, forcedSets$abstract.time.diff, xlab="original program size (AST nodes)", ylab="Analysis time (% of original)", main="analysis time difference vs program size (abstract slice)")
plot(forcedSets$size, forcedSets$concrete.time.diff, xlab="original program size (AST nodes)", ylab="Analysis time (% of original)", main="analysis time difference vs program size (concrete slice)")
plot(forcedSets$size, forcedSets$abstract.time.diff, xlab="original program size (AST nodes)", ylab="Analysis time (% of original)", main="analysis time difference vs program size (abstract slice)")
plot(forcedSets$size, forcedSets$concrete.time.diff, xlab="original program size (AST nodes)", ylab="Analysis time (% of original)", main="analysis time difference vs program size (concrete slice)")
plot(forcedSets$size, forcedSets$abstract.time.diff, xlab="original program size (AST nodes)", ylab="Analysis time (% of original)", main="analysis time difference vs program size (abstract slice)")
aggregate(forcedSets$sign.diff, list(forcedSets$sets), FUN=mean) 
geometric_mean <- function(x){
  exp(mean(log(x))) 
}
aggregate(forcedSets$sign.diff, list(forcedSets$sets), FUN=geometric_mean) 
plot(groupedSignSize)
groupedSignSize <- aggregate(forcedSets$sign.diff, list(forcedSets$sets), FUN=geometric_mean) 
plot(groupedSignSize)
plot(groupedSignSize, xlab="% of set!s", ylab="slice size (% of original)", main="Slice size vs % of set!s (sign)")
groupedConcreteSize <- aggregate(forcedSets$concrete.diff, list(forcedSets$sets), FUN=geometric_mean) 
plot(groupedConcreteSize, xlab="% of set!s", ylab="slice size (% of original)", main="Slice size vs % of set!s (concrete)")
plot(groupedSignSize, xlab="% of set!s", ylab="slice size (% of original)", main="Slice size vs % of set!s (sign)")
plot(groupedConcreteSize, xlab="% of set!s", ylab="slice size (% of original)", main="Slice size vs % of set!s (concrete)")
plot(groupedSignSize, xlab="% of set!s", ylab="slice size (% of original)", main="Slice size vs % of set!s (sign)")
plot(groupedSignSize, xlab="% of set!s", ylab="slice size (% of original)", main="Slice size vs % of set!s (sign)")
plot(groupedSignSize, xlab="% of set!s", ylab="slice size (% of original)", main="Slice size vs % of set!s (sign)")
groupedConcreteTime <- aggregate(forcedSets$concrete.time.diff, list(forcedSets$sets), FUN=geometric_mean) 
plot(groupedConcreteTime, xlab="% of set!s", ylab="analysis time (% of original)", main="Analysis time vs % of set!s (concrete)")
groupedAbstractTime <- aggregate(forcedSets$abstract.time.diff, list(forcedSets$sets), FUN=geometric_mean) 
plot(groupedAbstractTime, xlab="% of set!s", ylab="analysis time (% of original)", main="Analysis time vs % of set!s (abstract)")
plot(groupedConcreteSize, xlab="% of set!s", ylab="slice size (% of original)", main="Slice size vs % of set!s (concrete slice)")
plot(groupedSignSize, xlab="% of set!s", ylab="slice size (% of original)", main="Slice size vs % of set!s (sign slice)")
wilcox.test(arbitrary$sign.size, arbitrary$parity.size, paired = TRUE) # not significant
wilcox.test(arbitrary$sign.size, arbitrary$concrete.size, paired = TRUE, alternative = "l") # significant
wilcox.test(arbitrary$concrete.time.diff, arbitrary$abstract.time.diff, paired = TRUE, alternative = "g") # not significant (almost..)
wilcox.test(manySets$sign.size, manySets$parity.size, paired = TRUE) # not significant
wilcox.test(manySets$sign.size, manySets$concrete.size, paired = TRUE) # significant
wilcox.test(manySets$concrete.time.diff, manySets$abstract.time.diff, paired = TRUE, alternative = "g") # significant
wilcox.test(arbitrary$sign.diff, manySets$sign.diff, paired = FALSE) # significant 
wilcox.test(forcedSets$sign.size, forcedSets$concrete.size, paired = TRUE) # significant
wilcox.test(forcedSets$sign.size, forcedSets$parity.size, paired = TRUE) # significant
wilcox.test(forcedSets$concrete.time.diff, forcedSets$abstract.time.diff, paired = TRUE, alternative = "g") # significant
wilcox.test(arbitrary$sign.size, arbitrary$parity.size, paired = TRUE) # significant
wilcox.test(manySets$sign.size, manySets$parity.size, paired = TRUE) # not significant
wilcox.test(arbitrary$sign.size, arbitrary$parity.size, paired = TRUE) # significant
groupedSignSize <- aggregate(forcedSets$sign.diff, list(forcedSets$sets), FUN=geometric_mean) 
plot(groupedSignSize, xlab="% of set!s", ylab="slice size (% of original)", main="Slice size vs % of set!s (sign slice)")
forcedSetsReduced <- filter(sets < 1)
forcedSetsReduced <- filter(forcedSets$sets < 1)
forcedSetsReduced <- filter(forcedSets, forcedSets$sets < 1)
forcedSetsReduced
forcedSetsReduced <- filter(forcedSets, forcedSets$sets < 1, preserve = FALSE)
forcedSetsReduced <- filter(forcedSets, forcedSets$sets < 1, .preserve = FALSE)
forcedSetsReduced <- filter(forcedSets, forcedSets$sets < 1)
wilcox.test(forcedSetsReduced$sign.size, forcedSetsReduced$parity.size, paired = TRUE) # significant
forcedSetsReduced <- forcedSets[forcedSets$sets < 1, ]
forcedSetsReduced
wilcox.test(forcedSetsReduced$sign.size, forcedSetsReduced$parity.size, paired = TRUE) # significant
forcedSetsReduced <- forcedSets[forcedSets$sets < 2, ]
wilcox.test(forcedSetsReduced$sign.size, forcedSetsReduced$parity.size, paired = TRUE) # significant
forcedSetsReduced <- forcedSets[forcedSets$sets == 2, ]
wilcox.test(forcedSetsReduced$sign.size, forcedSetsReduced$parity.size, paired = TRUE) # significant
forcedSetsReduced <- forcedSets[forcedSets$sets == 3, ]
wilcox.test(forcedSetsReduced$sign.size, forcedSetsReduced$parity.size, paired = TRUE) # significant
forcedSetsReduced <- forcedSets[forcedSets$sets == 4, ]
wilcox.test(forcedSetsReduced$sign.size, forcedSetsReduced$parity.size, paired = TRUE) # significant
forcedSetsReduced <- forcedSets[forcedSets$sets == 5, ]
wilcox.test(forcedSetsReduced$sign.size, forcedSetsReduced$parity.size, paired = TRUE) # significant
wilcox.test(forcedSets$sign.size, forcedSets$parity.size, paired = TRUE) # significant
boxplot(forcedSets$sign.diff, forcedSets$parity.diff, forcedSets$concrete.diff, names=c("sign", "parity", "concrete"), xlab="Kind of slice", ylab="% of original size", main="Size after slicing")
boxplot(forcedSets$concrete.time.diff, forcedSets$abstract.time.diff, names=c("concrete slice", "abstract slice"), xlab="Kind of slice", ylab="analysis time (% of original time)", main="Analysis time per kind of slice (parity analysis)")
plot(forcedSets$size, forcedSets$sign.diff, ylab="% of original size", xlab="program size (AST nodes)", main="slice size vs program size")
plot(forcedSets$sets, forcedSets$sign.diff, xlab="% of set!s", ylab="slice size (% of original size)", main="slice size vs % of set!s")
plot(forcedSets$size, forcedSets$abstract.time.diff, xlab="original program size (AST nodes)", ylab="Analysis time (% of original)", main="analysis time difference vs program size (abstract slice)")
groupedSignSize <- aggregate(forcedSets$sign.diff, list(forcedSets$sets), FUN=geometric_mean) 
plot(groupedSignSize, xlab="% of set!s", ylab="slice size (% of original)", main="Slice size vs % of set!s (sign slice)")
boxplot(forcedSets$concrete.time.diff, forcedSets$abstract.time.diff, names=c("concrete slice", "abstract slice"), xlab="Kind of slice", ylab="analysis time (% of original time)", main="Analysis time per kind of slice (parity analysis)")
groupedConcreteTime <- aggregate(forcedSets$concrete.time.diff, list(forcedSets$sets), FUN=geometric_mean) 
plot(groupedConcreteTime, xlab="% of set!s", ylab="analysis time (% of original)", main="Analysis time vs % of set!s (concrete slice)")
groupedAbstractTime <- aggregate(forcedSets$abstract.time.diff, list(forcedSets$sets), FUN=geometric_mean) 
plot(groupedAbstractTime, xlab="% of set!s", ylab="analysis time (% of original)", main="Analysis time vs % of set!s (abstract slice)")
q()
